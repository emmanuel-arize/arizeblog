<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/arizeblog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/arizeblog/" rel="alternate" type="text/html" /><updated>2023-07-03T07:26:36+00:00</updated><id>http://localhost:4000/arizeblog/feed.xml</id><title type="html">ARIZE-BLOG</title><subtitle></subtitle><author><name>Emmanuel Arize</name></author><entry><title type="html">Introduction to RANKX</title><link href="http://localhost:4000/arizeblog/power-bi/2023/05/23/Rankx.html" rel="alternate" type="text/html" title="Introduction to RANKX" /><published>2023-05-23T00:00:00+00:00</published><updated>2023-05-23T00:00:00+00:00</updated><id>http://localhost:4000/arizeblog/power-bi/2023/05/23/Rankx</id><content type="html" xml:base="http://localhost:4000/arizeblog/power-bi/2023/05/23/Rankx.html"><![CDATA[<p>In this post I will be detailing how to use DAX RANKX function. Ranking is one of the most commonly used calculations in Power BI reports. In Many reports products, countries and many more are usually ranked based on certain measures such as their revenue volumes to determine their ranking positions and to get a better view of the products and countries from which the company is getting more revenue or sales from and RANKX is a DAX function that can used for ranking.</p>

<p><strong>RANKX</strong> function is an iterator that is used to show the ranking value of an element according to a specific sort
order. It returns the ranking of a number in a list of numbers for each row in the table argument. As and iterator it requires at least two parameters, the table that it scans and an expression that is evaluated for each row of the table. It has the syntax below,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RANKX(&lt;table&gt;, &lt;expression&gt;[, &lt;value&gt;[, &lt;order&gt;[, &lt;ties&gt;]]])
</code></pre></div></div>

<p>From the syntax the table and expression parameters are the required parameters. The rest are optional.</p>

<h4 id="table">table</h4>
<p>The first parameter &lt;table&gt; requires table as input. The table can be a standard table that you imported into Power BI or any DAX expression that returns a table of data over which the expression is evaluated.</p>

<h4 id="expression">expression</h4>
<p>The expression parameter can be thought of as <strong>“Sort by”</strong> instruction for the RANKX function. It is the expression upon which the ranking is calculated based on it. The expression is evaluated for each row of table, to generate all possible values for ranking. It can be any DAX expression that returns a single scalar value.</p>

<h4 id="value">value</h4>
<p>(Optional) Any DAX expression that returns a single scalar value whose rank is to be
found. When the value parameter is omitted, the value of expression at the current row is used
instead.</p>

<h4 id="order">order</h4>
<p>The order parameter is an optional parameter that allows you to swap the ranking between ASC (ascending) or DESC (descending). DESC is the default value when the order parameter is omitted.</p>

<h3 id="ties">ties</h3>
<p>(Optional) An enumeration that defines how to determine ranking when there are ties. This argument can be either Skip (default value) or Dense. When set to Dense, the function doesn’t skip numbers for tied ranks.</p>

<h2 id="practical-examples">Practical Examples</h2>
<p>In this example I will be using  sales data for a small makeup company as shown below,</p>

<p><br />
<img class="w3-center w3-card" src="/arizeblog/assets/images/power_bi/rankx_1.jpg" />
<br /></p>

<p>As member of the data analyst team we have been tasked by the manager to rank the sales representatives (sale reps for short) based on their related sales amount given below, because he wants to know the best performing sale reps in the company.
<br />
<img class="w3-center w3-card" src="/arizeblog/assets/images/power_bi/rankx_2.jpg" />
<br /></p>

<p>To rank sale reps the ranking computation is performed by the code below</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/rankx_3.jpg" />
<br /></p>

<p>The use of <strong>ISINSCOPE</strong> is to avoid showing a value at the grand total level.</p>

<p>The <strong>ALL</strong> function ignores any filters that might have been applied and returns all the rows in a table, or all the values in a column. With the ranks computed, when used in a matrix visual will produce the result is given below</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/rankx_4.jpg" />
<br /></p>

<p>In the presence of slicers that reduce the number of sale reps visible to the matrix because <strong>ALL</strong> function ignores any filter in the report, the rank of a selected sale rep will be the same as his/her rank in the ranking of all sale reps as shown below</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/rankx_5.jpg" />
<br /></p>

<p>Instead of <strong>ALL</strong> we can use <strong>ALLSELECTED</strong>. ALLSELECTED guarantees a better behavior in the presence of
slicers that reduce the number of sale reps visible to the matrix. It removes context filters from columns and rows in the current query, while retaining all other context filters or explicit filters. The ranking will automatically update depending on the selection in the slicer.</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/rankx_6.jpg" />
<br /></p>

<p>Using the code in a matrix visual produce the result below</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/rankx_7.jpg" />
<br /></p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/rankx_8.jpg" />
<br /></p>

<p>With the sale reps ranked, the manager has now decided that he wants to know the products to send to the various locations so he has tasked the data analyst team to rank the products in combination with the locations based on their related sales Amount.</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/rankx_9.jpg" />
<br /></p>

<p>The code for the ranking is given below</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/rankx_10.jpg" />
<br /></p>

<p>When used in a matrix visual will produces the results below
<br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/rankx_11.jpg" />
<br />
<br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/rankx_12.jpg" />
<br /></p>]]></content><author><name>Emmanuel Arize</name></author><category term="Power-BI" /><summary type="html"><![CDATA[In this post I will be detailing how to use DAX RANKX function. Ranking is one of the most commonly used calculations in Power BI reports. In Many reports products, countries and many more are usually ranked based on certain measures such as their revenue volumes to determine their ranking positions and to get a better view of the products and countries from which the company is getting more revenue or sales from and RANKX is a DAX function that can used for ranking.]]></summary></entry><entry><title type="html">DAX Time intelligence</title><link href="http://localhost:4000/arizeblog/power-bi/2023/05/17/Time-Intelligence.html" rel="alternate" type="text/html" title="DAX Time intelligence" /><published>2023-05-17T00:00:00+00:00</published><updated>2023-05-17T00:00:00+00:00</updated><id>http://localhost:4000/arizeblog/power-bi/2023/05/17/Time-Intelligence</id><content type="html" xml:base="http://localhost:4000/arizeblog/power-bi/2023/05/17/Time-Intelligence.html"><![CDATA[<p>In this blog, I’ll dive into time-related calculations in DAX with hands-on experience. Time intelligence relates to calculations over time. These calculations enable users to manipulate data using time periods such as weeks, months, quarters and years. They  accumulate values from the  beginning of a time period  such as year, quarter, month
 and build and compare calculations over those periods. Time-intelligence  functions modify the date filter context, and understanding these functions is very important to developing a range of date-related calculations that help in answering questions such us</p>

<ul>
  <li>What is the accumulated sales for the year, quarter, or month?</li>
  <li>Want to compare this month sales to that of last month?</li>
  <li>Is there any increase or decrease in sales in the current month compared to sales of the same period (month) in  the previous year?</li>
  <li>What is the year-to-date costs?</li>
</ul>

<p><a href="https://learn.microsoft.com/en-us/dax/time-intelligence-functions-dax" target="-_blank"> DAX </a> includes several time intelligence functions concerned with standard date periods, specifically years, quarters, and months to simplify such calculations but you can also write custom time intelligence formulas using the <strong>CALCULATE</strong> function. There are many different calculations that DAX has no predefined functions for your requirements so you cannot expressed these calculations by simply using standard DAX time intelligence functions. In this case you need to write custom time intelligence function to modify the  date filters.</p>

<p>In order to use any time intelligence function, you need a date table satisfying the following requirements:</p>

<ul>
  <li>The date table in your model must contain a column with a Date/Time or Date data type known as the date column containing unique values.</li>
  <li>The date column must not contain blanks or any missing dates. For a Gregorian calendar year the Date table must always start on January 1 and end on December31, including all the dates in this range. If the report only references fiscal years, then the date table must include all the dates from the first to the last day of a fiscal year.</li>
</ul>

<p>These requirements are useful to perform any time intelligence calculation.</p>

<h3 id="sample-data">Sample Data</h3>
<p>To work through the examples in this article, you’ll need to download the data from <a href="https://github.com/MicrosoftDocs/mslearn-dax-power-bi/raw/main/activities/Adventure%20Works%20DW%202020%20M07.pbix" target="_blank"> Adventure Works DW 2020 M07.pbix</a> as shown below</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_1.jpg" />
<br /></p>

<p>With the data downloaded let now make our hands dirty by going through some examples. Time intelligence functions support calculations to aggregate and compare data so in this post I will look at two groups of DAX time intelligence functions namely a group concerned with</p>
<ul>
  <li>Summarizations over time.</li>
  <li>Comparisons over time.</li>
</ul>

<p>Before exploring these functions let add a calculated column named <strong>Year</strong> to the date table using the code below</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Year = YEAR('Date'[Date])
</code></pre></div></div>

<h2 id="summarizations-over-time">Summarizations over time</h2>
<p>This group of DAX time intelligence functions are concerned with summarizations or aggregation of data over time such as computing period-to-date totals.</p>

<h3 id="exploring-year-to-date-total">exploring Year-to-date total</h3>
<p>Let’s start the example with a simple function to calculate year to date. Year-to-date (YTD) total aggregates data starting on the first day of the fiscal or calendar year  up to the last date in the Specified date. To illustrate how YTD calculation works let create a YTD measure for the calendar year called <strong>YTD Sales C</strong> using CALCULATE and DATESYTD functions.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>YTD Sales C = CALCULATE(Sales[Sales Amt],DATESYTD('Date'[Date]))
</code></pre></div></div>
<p>DATESYTD returns the set of dates for the year to date visible in the filter context and is given by</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DATESYTD(&lt;dates&gt; [,&lt;year_end_date&gt;])
</code></pre></div></div>
<p>where <strong>year_end_date</strong> is optional parameter that defines the year-end date with December 31 as it default
date.  With the YTD total for the calendar year measure created, let now create a matrix visual with rows and values as below</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_2.jpg" />
<br /></p>

<p>This will produce the result below for the calendar years.
<br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_3.jpg" />
<br /></p>

<p>Using YTD sales for the calendar year (<strong>YTD Sales C</strong>) to compute the YTD sales for the fiscal year will produce inaccurate result if the report is based on a fiscal year that does not correspond to the calendar year that is the fiscal year starts on a different date other than January 1. An example of such inaccurate result is shown below.</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_4.jpg" />
<br /></p>

<p>We can see from the above matrix that since the fiscal year has a different starting date (July 1) from that of the calendar year (January 1), this produce inaccurate results. To produce the right values for the fiscal YTD total if the fiscal year that does not correspond to the calendar year then the DATESYTD function requires an additional argument to identify the last day of the fiscal year. Since the fiscal year end on June 30 (“6-30”) I will now create a YTD sales measure for the fiscal year called <strong>YTD Sales F</strong> by the code below</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>YTD Sales F = CALCULATE(Sales[Sales Amt], DATESYTD('Date'[Date],"6-30") )

</code></pre></div></div>

<p>Using a matrix visual will produce the result below</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_5.jpg" />
<br /></p>

<p>The YTD calculation can be simplified by using DAX <strong>TOTALYTD</strong> function which is given by</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TOTALYTD(&lt;expression&gt;,&lt;dates&gt;[,&lt;filter&gt;][,&lt;year_end_date&gt;])
</code></pre></div></div>
<p>Using <strong>TOTALYTD</strong> to create a YTD measure for the fiscal year named <strong>YTD Fiscal</strong> will be</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>YTD Fiscal = TOTALYTD(
                        Sales[Sales Amt],
                        'Date'[Date],
                        "6-30"
                        )
</code></pre></div></div>

<p>This will produce the result below
<br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_6.jpg" />
<br /></p>

<h3 id="quarter-to-date-total">Quarter-to-date total</h3>

<p>Similar to YTD,  quarter to date (QTD) total aggregates data from the first day of the first month of the quarter
 to  the last day of the last month of the quarter and can be computed using CALCULATE and DATESQTD functions.
Let create a measure named <strong>QTD Sales</strong> for the QTD total sales  as follows</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>QTD Sales = CALCULATE(Sales[Sales Amt],DATESQTD('Date'[Date]))
</code></pre></div></div>
<p>Using a matrix visual the QTD calculation will produce the result below</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_7.jpg" />
<br /></p>

<p>From the above matrix visual we can see that <strong>QTD Sales</strong> display the QTD total sales of the fourth quarter as the total sales for the year. To remove this inaccurate results from the matrix visual I will write a conditional expression using the IF function together with <strong>ISINSCOPE</strong> to avoid showing a value at the year level. Using these functions the QTD total sales will be as follows</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>QTD Sales = IF( ISINSCOPE('Date'[QUATER]) ,
                 CALCULATE( Sales[Sales Amt],
                            DATESQTD('Date'[Date])
                            )
                  )
</code></pre></div></div>
<p>and will produce the result below</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_8.jpg" />
<br /></p>

<p>The QTD total calculation can also be simplified using TOTALQTD function which is given as</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TOTALQTD(&lt;expression&gt;,&lt;dates&gt;[,&lt;filter&gt;])
</code></pre></div></div>

<h3 id="month-to-date-total">Month-to-date total</h3>
<p>The month to date (MTD) aggregates data from the first day to the last day of the month and can be computed as below</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MTD Sales = IF(
                HASONEFILTER('Date'[Month]),
                 CALCULATE(  Sales[Sales Amt],
                             DATESMTD('Date'[Date])
                            )
                )
</code></pre></div></div>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_10.jpg" />
<br /></p>

<p>The MTD total computation can also be simplified using TOTALMTD function.</p>

<h2 id="comparisons-over-time">Comparisons over time.</h2>

<p>When working with dates,
One common types of analysis that we usually perform when working with dates is to compare time periods such as comparing sales in the current month or year with the previous month or year which can be useful for making comparisons of trends. Let now explore time intelligence examples under comparison over time.</p>

<h3 id="year-over-year-calculation">Year-Over-Year calculation</h3>
<p>Year-over-year (YOY) compares a period to the equivalent period in the previous year. It compute the difference between a measure and its value in the previous year. In this post I will calculate the YOY growth as an amount in Sales. To calculate the YOY sales I will first create a measure named <strong>PY Sales</strong> which calculate the sales of the previous year using the <strong>DATEADD</strong> function as follows.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PY Sales = CALCULATE(
                      Sales[Sales Amt],
                      DATEADD('Date'[Date],-1,YEAR)
                      )
</code></pre></div></div>
<p>With PY Sales measure computed I will now compute YOY as an amount in Sales  named <strong>YOY Sales</strong> which is the difference between sales in the current year and that of the previous year. The code below only shows values for which both the current and previous sales are available.</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_11.jpg" />
<br /></p>

<p>I will express the YOY Sales as a as a percentage named <strong>YOY Sales %</strong> by dividing YOY Sales by PY Sales.
Substracting the PY Sales from the  Sales Amount (YTD Sales)  and using the PY Sales as a reference for the percentage difference indicate that a 100 percent corresponds to a value that has doubled in a year and 100+ percent indicate a value which is more than doubled in a year.
<br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_12.jpg" />
<br /></p>

<p>Using a matrix visual the PY Sales, YOY Sales and YOY Sales % will produce the result below</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_13.jpg" />
<br /></p>

<h3 id="quarter-over-quarter-calculation">Quarter-Over-Quarter calculation</h3>
<p>Similar to YOY calculation, Quarter-over-quarter calculation compares the value of each quarter with the value of the quarter before. Under QOQ calculation I will create a measures named <strong>PQ Sales</strong> which computes sales of the previous quarter, <strong>QOQ Sales</strong>  which is the difference between sales in the current (this) quarter QTD Sales and that of the previous quarter (the quarter before the current quarter) PQ Sales and <strong>QOQ Sales %</strong> which expresses QOQ Sales as a percentage of the previous quarter.</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_14.jpg" />
<br /></p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_15.jpg" />
<br /></p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_16.jpg" />
<br /></p>

<p>Using a matrix visual the PQ Sales, QOQ Sales and QOQ Sales % will produce the result below</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_17.jpg" />
<br /></p>

<h3 id="month-over-month-calculation">Month-Over-Month calculation</h3>
<p>A similar approach can be used for the <strong>month-over-month</strong> calculation which compares the value of each month with the value of the month before. Under the MOM calculation I will also create measures named <strong>PM Sales</strong> which computes sales of the previous month, <strong>MOM Sales</strong>  which is the difference between sales in the current month (MTD Sales or Sales Amt) and that of the previous Month PM Sales and <strong>MOM Sales %</strong> which expresses MOM Sales as a percentage of the previous month.</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_18.jpg" />
<br /></p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_19.jpg" />
<br /></p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_20.jpg" />
<br /></p>

<p>With these calculation let now compares the sales in each month (MTD Sales) of 2020 with the sales of the month before (PM Sales). Note the 2020 fiscal year start on July 1, 2019.</p>

<p><br />
<img class="w3-center w3-brown" src="/arizeblog/assets/images/power_bi/time_int_21.jpg" />
<br /></p>]]></content><author><name>Arize Emmanuel</name></author><category term="Power-BI" /><summary type="html"><![CDATA[In this blog, I’ll dive into time-related calculations in DAX with hands-on experience. Time intelligence relates to calculations over time. These calculations enable users to manipulate data using time periods such as weeks, months, quarters and years. They accumulate values from the beginning of a time period such as year, quarter, month and build and compare calculations over those periods. Time-intelligence functions modify the date filter context, and understanding these functions is very important to developing a range of date-related calculations that help in answering questions such us]]></summary></entry><entry><title type="html">Group By Transformation</title><link href="http://localhost:4000/arizeblog/power-query/2023/05/02/Group-By.html" rel="alternate" type="text/html" title="Group By Transformation" /><published>2023-05-02T00:00:00+00:00</published><updated>2023-05-02T00:00:00+00:00</updated><id>http://localhost:4000/arizeblog/power-query/2023/05/02/Group-By</id><content type="html" xml:base="http://localhost:4000/arizeblog/power-query/2023/05/02/Group-By.html"><![CDATA[<p>In this post I will be detailing how to use the Group By transformation to summarize data in Power Query. The Group By operation summarizes data by aggregating rows based on one or more columns. To illustrate the steps involved in using Group By need data of which we will be working with and so in this post I  will be using sales data from a small makeup company shown below,</p>

<p><br />
<img class="w3-center w3-card" src="/arizeblog/assets/images/power_bi/rankx_1.jpg" />
<br /></p>

<p>To perform any grouping using the Group By operation we first need to know where to find the Group By button. The Group by button can be found in three places:</p>

<p>1. First select a column within the data, right-click and select Group By.</p>

<p>2. It can also be found in the <b>Transform group</b> On the <b>Home tab</b>.</p>

<p><br />
<img class="w3-center w3-card" src="/arizeblog/assets/images/power_query/group_1.jpg" />
<br /></p>

<p>3. And on the <b>Transform tab</b>, in the <b>Table group</b>.</p>
<p><br />
<img class="w3-center w3-card" src="/arizeblog/assets/images/power_query/group_2.jpg" />
<br /></p>

<p>With the data provided and the location of the Group By button found, our first task is to summarize the total amount of sales obtained from the sale of a product at a specific location. In other words we want the total amount of sales obtained by selling a product at a specific location so we’ll use the Product and Location columns to perform the group by operation. To find the solution to our task by using Group By transformation,</p>

<p> <b>1.</b> First in the Transform group On the Home tab select Group By which will open the Group
By dialog box as shown below.</p>

<p><br />
<img class="w3-center w3-card" src="/arizeblog/assets/images/power_query/group_3.jpg" />
<br /></p>
<p> Here if product column is not selected then change the column selected to the product column</p>
<p> <b>2.</b> Select the Advanced option, so you can select multiple columns to group by.</p>
<p> <b>3.</b> Select Add grouping.</p>
<p> <b>4.</b> Select the Location column. </p>
<p> <b>5.</b> In New column name, enter Total Sales, in Operation, select Sum, and in Column, select Sale Amount as shown below.</p>
<p><br />
<img class="w3-center w3-card" src="/arizeblog/assets/images/power_query/group_4.jpg" />
<br /></p>
<p> <b>6.</b> Select OK </p>
<p>After selecting ok the operation produce the following table</p>

<p><br />
<img class="w3-center w3-card" src="/arizeblog/assets/images/power_query/group_5.jpg" />
<br />
The Group by result produced is one record per each unique combination of all fields set in the “group by ” section.</p>

<p>With task 1 completed let now move a step further to find for each total sales of product sold at a specific location, the maximum sale amount of the product and it related sales rep. To edit the Group By dialog box in the Query Settings pane, under APPLIED STEPS as shown below
<br />
<img class="w3-center w3-card" src="/arizeblog/assets/images/power_query/group_6.jpg" />
<br /></p>

<p>Right click on the <strong>Grouped Rows</strong> step and select <strong>Edit Settings</strong></p>

<p><br />
<img class="w3-center w3-card" src="/arizeblog/assets/images/power_query/group_4.jpg" />
<br /></p>

<p>Now click on <b>Add aggregation</b> </p>
<p> In New column name, enter Products, in Operation, All Rows.</p>

<p>A Row Operation does not require a column (that is why column under All Rows operation is empty), because data is grouped by a row in the Group By dialog box</p>

<p><br />
<img class="w3-center w3-card" src="/arizeblog/assets/images/power_query/group_7.jpg" />
<br /></p>

<p>  Select OK </p>
<p>This operation produce the following table</p>

<p><br />
<img class="w3-center w3-card" src="/arizeblog/assets/images/power_query/group_8.jpg" />
<br /></p>

<p>With <b>All Rows</b> An inner Table value is inserted which contains all the rows that were grouped by the Product and Location columns from your original table, so notice how the Products column has [Table] values inside each cell. You can later expand the columns if you want.</p>

<h3 id="extraction-of-top-performer-product-information">Extraction of top performer product information</h3>

<p>With the new Products column with [Table] values, let now create a custom column named <strong>Top performer product</strong>. To create a custom column named Top performer product</p>

<p><b>1.</b> Click on the Add Column tab on the ribbon</p>

<p><b>2.</b> From the General group select Custom Column</p>

<p><br />
<img class="w3-center w3-card" src="/arizeblog/assets/images/power_query/group_9.jpg" />
<br /></p>

<p><b>3.</b> Name your new column name Top performer product and enter the formula<code>Table.Max([Products], "Sale Amount" ) </code>under Custom column formula.</p>

<p><br />
<img class="w3-center w3-card" src="/arizeblog/assets/images/power_query/group_10.jpg" />
<br /></p>

<p>Select Ok.</p>

<p>With ok selected, it creates a new column named Top performer product with [Record] values.</p>

<p><br />
<img class="w3-center w3-card" src="/arizeblog/assets/images/power_query/group_11.jpg" />
<br /></p>

<p>With the Top performer product column created, select the expand icon and select the Sale rep and Sale Amount fields, and then click OK</p>

<p><br />
<img class="w3-center w3-card" src="/arizeblog/assets/images/power_query/group_12.jpg" />
<br /></p>

<p>After clicking ok it produces the result below which contain top or maximum Sale amount of a product in a specific location and the sales rep related to the maximum sale amount in that location.</p>

<p><br />
<img class="w3-center w3-card" src="/arizeblog/assets/images/power_query/group_13.jpg" />
<br /></p>

<h3 id="conclusion">Conclusion</h3>
<p>This post showed a  basic Group By operation in Power Query. We’ve also seen that we can perform aggregation based on several columns and that the group by transformation is a very useful transformation technique in Power Query.</p>]]></content><author><name>Arize</name></author><category term="Power-Query" /><summary type="html"><![CDATA[In this post I will be detailing how to use the Group By transformation to summarize data in Power Query. The Group By operation summarizes data by aggregating rows based on one or more columns. To illustrate the steps involved in using Group By need data of which we will be working with and so in this post I will be using sales data from a small makeup company shown below,]]></summary></entry><entry><title type="html">Data Transformation using Power Query (M)</title><link href="http://localhost:4000/arizeblog/power-query/2023/04/17/Data-Transformation.html" rel="alternate" type="text/html" title="Data Transformation using Power Query (M)" /><published>2023-04-17T00:00:00+00:00</published><updated>2023-04-17T00:00:00+00:00</updated><id>http://localhost:4000/arizeblog/power-query/2023/04/17/Data-Transformation</id><content type="html" xml:base="http://localhost:4000/arizeblog/power-query/2023/04/17/Data-Transformation.html"><![CDATA[<p>The number one issue facing data analyst when building robust and stable solutions has been accessing,
cleansing and transforming the data but with the integration of Power Query into all the data analysis and business intelligence tools from Microsoft such as Excel, Power BI and Analysis Services, data accessing, cleansing and transformation has been made easy because Power Query is designed to be an easy to use data accessing, transformation and manipulation tool. In this post I will be illustrating how to clean and transform data using power query but instead of using the Power Query GUI I will be using the Advanced editor to write the M code. Before the cleansing and transformation I’ll assume you have been given a project to complete and as analyst you’ve define a clear measurable and quantifiable goal for the project, your audience have been identified and any other requirements are also met. You now have the required data for the project but you’ve seen that the data is in state not suitable for the analysis so you’ve decided to condition or transform the data to suit your analysis. Transforming the data to suit your analysis is a critical step in the data analysis process as it helps to ensure that the data is in a format that is suitable for analysis and modeling, and that it is free of errors and inconsistencies. A failure to transform the data to suit your analysis will result in producing faulty output as there is the popular saying among the data analyst community which state “garbage in, garbage out” which simply means “incorrect or poor input will produce faulty output”.</p>

<h3 id="what-is-data-transformation">What is Data Transformation?</h3>

<p>Data transformation is the process of converting, cleansing, and structuring data into a usable format that can be used for analysis and modeling. The goal of data transformation is to prepare the data so that it can be used to extract useful insights and knowledge. Data transformation include data cleaning, data integration, normalization, scaling, reduction, discretization, aggregation and many more.</p>

<h3 id="sample-data">Sample Data</h3>

<p>To work through the examples in this post, you need to download the data used in  this post from <a href="https://github.com/emmanuel-arize/Power-Query/blob/main/data/Life-Expectancy-At-Birth.xls" target="_blank">Life-Expectancy-At-Birth.xls</a> and load it into power query as shown below</p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/trans_1.jpg" />
<br /></p>

<h2 id="data-transformation">Data Transformation</h2>

<p>From the data above we can see that power query was not able to determine correctly the column headers of the data loaded. Looking at the data we can see that the actual column headers for the data is Row 1 but because power query could not determine it correctly, it labels the column headers as column1, column2 and in that order.</p>

<h3 id="promote-headers-operation">Promote Headers Operation</h3>

<p>Sometimes the actual column headers of the table is the first row as seen above but because power query could not determine it correctly it labels the column headers incorrectly and this need to be corrected. With the promote headers operation, it promotes the first row of values as the new column headers. There are a number of places where we can select the promote headers operation (<strong>Use First Row as Headers</strong> )</p>

<p>Click on the Home tab then in the Transform group</p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/append_5.jpg" />
<br /></p>

<p>Or On the Transform tab, in the Table group.</p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/append_6.jpg" />
<br /></p>

<p>After clicking on Use First Row as Headers, the first row in the query is used as the column headers of the query but instead of clicking it I will write the M code using the Advanced Editor which can be located on the Home tab of the query editor. To open the Advanced Editor Click on the home tab then Advanced Editor as below</p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/append_6_1.jpg" />
<br /></p>

<p>When the Advanced Editor is clicked it will opened an editor similar to one below
<br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/append_6_2.jpg" />
<br /></p>

<p>Using this editor I will use the M table function <strong>Table.PromoteHeaders</strong>  to write a code named <strong>FirstRowAsHeaders</strong> promote the first row as Headers</p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/append_6_3.jpg" />
<br /></p>

<p>and we get the table below</p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/trans_2.jpg" />
<br /></p>

<h3 id="remove-columns">Remove columns</h3>

<p>Remove columns is an operations that help you define what columns your table needs to remove. From the data the columns named Indicator Name and Indicator Code contain data not relevant to our analysis so we need to remove them. To remove these columns select the columns to remove, in our case the column Indicator Name and Indicator Code as below</p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/trans_3.jpg" />
<br /></p>

<p>then <strong>right click</strong> and select <strong>Remove Columns</strong> to remove the selected columns. Remove Columns can also be found on the <strong>Home tab</strong> in the <strong>Manage Columns group</strong>.</p>

<p>Instead of using the approach described above, let use the M table function <strong>Table.RemoveColumns</strong> to write the code named <strong>RemoveUnwantedColumns</strong> to remove the unwanted columns.</p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/trans_3_1.jpg" />
<br /></p>

<p>With the unwanted columns removed we now have the table shown below</p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/trans_3_2.jpg" />
<br /></p>

<h3 id="renaming-columns">Renaming Columns</h3>
<p>To rename a column heading you can double click on the column heading start typing the new name but since we are writing the code, let use the <strong>Table.RenameColumns</strong> function to write the code named <strong>ColumnRenamed</strong> to rename the column Country Name to Country.</p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/trans_3_3.jpg" />
<br /></p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/trans_3_4.jpg" />
<br /></p>

<h3 id="unpivot-columns">Unpivot columns</h3>

<p>given a table like the one above, where the rows of the country and the date columns create a matrix of values, it’s difficult to analyze the data in a scalable way. In such cases we might want to unpivot or flatten the data, to put it in a matrix format where all similar values are in one column. To unpivot the table to have country, country code ,year and life Expectancy at birth as columns select the country and country code columns as below, then right click on the selected columns and select <strong>Unpivot Other Columns</strong>.</p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/trans_8.jpg" />
<br /></p>

<p>Instead of unpivoting using the approach described above, let use the m <strong>Table.UnpivotOtherColumns</strong> to write a code named <strong>UnpivotOtherColumns</strong> to unpivot other columns.</p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/trans_8_1.jpg" />
<br /></p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/trans_8_2.jpg" />
<br /></p>

<h3 id="transform-column-date-type">Transform Column Date Type</h3>
<p>When using data for analysis you have to make sure the data type of the various columns are correct.</p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/trans_8_21.jpg" />
<br /></p>

<p>For instance we know that the Life Expectancy at birth (Life_Expentancy_At_Birth) column is a numerical column when we look at the data type of Life_Expentancy_At_Birth above, it is given as a text which is not correct so we need to change it to a numerical data type. Using the <strong>Table.TransformColumnTypes</strong> function the code below named <strong>ChangeDataType</strong> change the Life_Expentancy_At_Birth data type from text to a numerical data type</p>

<p><br />
 <img class="w3-card" src="/arizeblog/assets/images/power_query/trans_8_3.jpg" />
 <br /></p>

<p><br />
 <img class="w3-card" src="/arizeblog/assets/images/power_query/trans_8_31.jpg" />
 <br /></p>

<h3 id="sorting">Sorting</h3>

<p>Let sort the data in ascending order based on the Year column. The sorting is given by the code below named <strong>SortYear</strong> using the <strong>Table.Sort</strong> function</p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/trans_8_4.jpg" />
<br /></p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/trans_8_41.jpg" />
<br /></p>

<h3 id="filtering-the-data">Filtering the Data</h3>

<p>From the data some countries such as <strong>Andorra, American Samoa</strong> etc, contain null values throughout, so we need to filter out such rows from the data. Since these nulls values are under the Life_Expectancy_At_Birth column, let filter the rows containing null under the Life_Expectancy_At_Birth column using <strong>Table.RemoveMatchingRows</strong> function to remove rows containing null</p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/trans_5_1.jpg" />
<br /></p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_query/trans_5_2.jpg" />
<br /></p>]]></content><author><name>Emmanuel Arize</name></author><category term="Power-Query" /><summary type="html"><![CDATA[The number one issue facing data analyst when building robust and stable solutions has been accessing, cleansing and transforming the data but with the integration of Power Query into all the data analysis and business intelligence tools from Microsoft such as Excel, Power BI and Analysis Services, data accessing, cleansing and transformation has been made easy because Power Query is designed to be an easy to use data accessing, transformation and manipulation tool. In this post I will be illustrating how to clean and transform data using power query but instead of using the Power Query GUI I will be using the Advanced editor to write the M code. Before the cleansing and transformation I’ll assume you have been given a project to complete and as analyst you’ve define a clear measurable and quantifiable goal for the project, your audience have been identified and any other requirements are also met. You now have the required data for the project but you’ve seen that the data is in state not suitable for the analysis so you’ve decided to condition or transform the data to suit your analysis. Transforming the data to suit your analysis is a critical step in the data analysis process as it helps to ensure that the data is in a format that is suitable for analysis and modeling, and that it is free of errors and inconsistencies. A failure to transform the data to suit your analysis will result in producing faulty output as there is the popular saying among the data analyst community which state “garbage in, garbage out” which simply means “incorrect or poor input will produce faulty output”.]]></summary></entry><entry><title type="html">Introduction to Customer Segmentation</title><link href="http://localhost:4000/arizeblog/machine-learning-python/2023/04/15/Customers-Segment.html" rel="alternate" type="text/html" title="Introduction to Customer Segmentation" /><published>2023-04-15T00:00:00+00:00</published><updated>2023-04-15T00:00:00+00:00</updated><id>http://localhost:4000/arizeblog/machine-learning-python/2023/04/15/Customers%20Segment</id><content type="html" xml:base="http://localhost:4000/arizeblog/machine-learning-python/2023/04/15/Customers-Segment.html"><![CDATA[<p>In this post, I’ll focus on customer segmentation and provide practical examples using k-means algorithm.</p>

<p>A company serve a wide range of customers with unique interests, having different sensitivities to price, product preferences and requirements which cannot be satisfied by using a single one-size-fits-all marketing campaign. As a marketing analyst you cannot also personalize marketing campaigns for each customer, instead, marketers use cluster analysis to discover pattern within the customers (customers data) and partition them into distinct homogenous segments so that observations within each segment are quite similar to each other, while observations in different segments are quite different from each other. This is perceived as an important business opportunity because by identifying subgroups of people who might be more receptive to a particular form of advertising, or more likely to purchase a particular product, this allow a company to maximize the use of it limited resources. Since we are writing about customers segmentation, what Is Customer Segmentation?</p>

<h3 id="what-is-customer-segmentation">What Is Customer Segmentation?</h3>
<p><strong>Customers segmentation</strong> is the process of partitioning a target customers  into segments where customers within each segment are similar and collectively different from customers in other segments. The general goal of customer segmentation is to identify subgroups of customers with common characteristics and wants. It assumes that different segments of customer  require different marketing campaigns and a company might segment their customers based on  demographic, psychographic, geographic, and behavioral.</p>

<h2 id="why-is-customer-segmentation-important">Why is customer segmentation important?</h2>

<p>Customers have different sensitivities to price, product preferences and requirements. Markets are also saturated with attractive products and services, of which many are in direct competition with your product, services and marketing offerings, so by identifying the differences and similarities between potential customer segments, and with a deep understanding of each segment, a marketer can make better strategic choices about opportunities, develop more competitive and attractive offerings tailor to the specific requirements of each segment to better satisfy their wants that aim to outweigh the bundle of benefits provided by your competitors. This make marketing campaigns more effective and provide a significant boost to the company and also improve customer service.</p>

<p>There are many clustering techniques  (unsupervised machine learning algorithms) that can help companies segment their customers but in this post I will focus on a very commonly used technique known as <strong>K-means clustering</strong>. Before diving into K-Means clustering let first load the mall customers data that will be used in this post and preprocess it.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="s">"OMP_NUM_THREADS"</span><span class="p">]</span> <span class="o">=</span> <span class="s">'1'</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="kn">from</span> <span class="nn">sklearn.cluster</span> <span class="kn">import</span> <span class="n">KMeans</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mall_data</span><span class="o">=</span><span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"./data/Mall_Customers.csv"</span><span class="p">)</span>
<span class="n">mall_data</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CustomerID</th>
      <th>Gender</th>
      <th>Age</th>
      <th>Annual Income (k$)</th>
      <th>Spending Score (1-100)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>Male</td>
      <td>19</td>
      <td>15</td>
      <td>39</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>Male</td>
      <td>21</td>
      <td>15</td>
      <td>81</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>Female</td>
      <td>20</td>
      <td>16</td>
      <td>6</td>
    </tr>
  </tbody>
</table>
</div>

<p>The data contain attributes such as age and gender of the customers, their estimated annual income (Annual Income (k$)) and spending score (Spending Score (1-100)) which denotes the amount of shopping a customer has done at the mall (a higher score means a higher spending ).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mall_data</span><span class="p">.</span><span class="n">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 200 entries, 0 to 199
Data columns (total 5 columns):
 #   Column                  Non-Null Count  Dtype
---  ------                  --------------  -----
 0   CustomerID              200 non-null    int64
 1   Gender                  200 non-null    object
 2   Age                     200 non-null    int64
 3   Annual Income (k$)      200 non-null    int64
 4   Spending Score (1-100)  200 non-null    int64
dtypes: int64(4), object(1)
memory usage: 7.9+ KB
</code></pre></div></div>

<p>With the data information provided above we can see that the mall data contain 5 attributes and 200 samples (customers) with no missing values</p>

<p>Let rename the attributes <strong>Annual Income (k$)</strong> to <strong>Income</strong> and <strong>Spending Score (1-100)</strong> to <strong>Spending_Score</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mall_data</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">'Annual Income (k$)'</span><span class="p">:</span><span class="s">'Income'</span><span class="p">,</span>
                          <span class="s">'Spending Score (1-100)'</span><span class="p">:</span><span class="s">'Spending_Score'</span><span class="p">},</span>
                             <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mall_data</span><span class="p">.</span><span class="n">columns</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Index(['CustomerID', 'Gender', 'Age', 'Income', 'Spending_Score'], dtype='object')
</code></pre></div></div>

<h3 id="selecting-clustering-variables">Selecting Clustering Variables</h3>
<p>There are multiple ways to segment customers and because of its exploratory nature, there is always the question of whether the cluster analysis is producing the correct segmentation scheme and is the result useful for targeting your audience? To make the segmentation useful it is important to first define the variables that form the basis of the homogeneous groups of customers because these variables directs the nature of the groups formed and provide insights into the grouped formed. In this post I will segments customers based on their income level and spending scores regardless of the customer gender and age so that we can have different marketing strategy for customers with high income and low spending scores, those with medium income and spending scores versus those with low income and high spending scores.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mall_data_1</span><span class="o">=</span><span class="n">mall_data</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">selected_cols</span><span class="o">=</span><span class="p">[</span><span class="s">'Income'</span><span class="p">,</span> <span class="s">'Spending_Score'</span><span class="p">]</span>
<span class="n">mall_data_1</span><span class="p">[</span><span class="n">selected_cols</span><span class="p">].</span><span class="n">head</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Income</th>
      <th>Spending_Score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>15</td>
      <td>39</td>
    </tr>
    <tr>
      <th>1</th>
      <td>15</td>
      <td>81</td>
    </tr>
    <tr>
      <th>2</th>
      <td>16</td>
      <td>6</td>
    </tr>
  </tbody>
</table>
</div>

<p>Let visualize the relationship between income and spending score</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="n">scatterplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">mall_data_1</span><span class="p">.</span><span class="n">Income</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">mall_data_1</span><span class="p">.</span><span class="n">Spending_Score</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"Relationship btw Income and Spending Scrore"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img class="w3-center" src="/arizeblog/assets/images/python/cust_seg_1.png" />
<br /></p>

<p>From the above graph the seems to be no correlation (relationship) between income and spending score . It also seems to have 5 natural groups</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mall_data_1</span><span class="p">[</span><span class="n">selected_cols</span><span class="p">].</span><span class="n">corr</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Income</th>
      <th>Spending_Score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Income</th>
      <td>1.000000</td>
      <td>0.009903</td>
    </tr>
    <tr>
      <th>Spending_Score</th>
      <td>0.009903</td>
      <td>1.000000</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"Min income: "</span><span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">mall_data_1</span><span class="p">[</span><span class="n">selected_cols</span><span class="p">].</span><span class="n">Income</span><span class="p">.</span><span class="nb">min</span><span class="p">()))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Max income: "</span><span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">mall_data_1</span><span class="p">.</span><span class="n">Income</span><span class="p">.</span><span class="nb">max</span><span class="p">()))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Min spending-score: "</span><span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">mall_data_1</span><span class="p">.</span><span class="n">Spending_Score</span><span class="p">.</span><span class="nb">min</span><span class="p">()))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Max spending-score: "</span><span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">mall_data_1</span><span class="p">.</span><span class="n">Spending_Score</span><span class="p">.</span><span class="nb">max</span><span class="p">()))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Min income: 15
Max income: 137
Min spending-score: 1
Max spending-score: 99
</code></pre></div></div>

<h2 id="standardizing--customer-data">Standardizing  Customer Data</h2>
<p>From the minimum and maximum values for Income and Spending score above we can see that the
two segmentation variables are measured on different scale. Since K-Means is distance-based methods of segment extraction, the range of values of a segmentation variable affects its relative influence on the clustering result so to balance the influence of the segmentation variables on the segmentation results, the segmentation variables are standardized to puts them on a common scale. I will standardize the customer data using the z-score standardization which is given as</p>

\[z=\frac{x_{i}-\bar{x}}{s}\]

<p>s=standard deviation</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">z_score</span><span class="o">=</span><span class="n">StandardScaler</span><span class="p">()</span>
<span class="n">mall_data_1</span><span class="p">[</span><span class="n">selected_cols</span><span class="p">]</span><span class="o">=</span><span class="n">z_score</span><span class="p">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">mall_data_1</span><span class="p">[</span><span class="n">selected_cols</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mall_data_1</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CustomerID</th>
      <th>Gender</th>
      <th>Age</th>
      <th>Income</th>
      <th>Spending_Score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>Male</td>
      <td>19</td>
      <td>-1.738999</td>
      <td>-0.434801</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>Male</td>
      <td>21</td>
      <td>-1.738999</td>
      <td>1.195704</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>Female</td>
      <td>20</td>
      <td>-1.700830</td>
      <td>-1.715913</td>
    </tr>
  </tbody>
</table>
</div>

<p>let now dive into K-means clustering</p>

<h1 id="k-means-clustering">K-Means Clustering</h1>

<p>K-means clustering is an approach for partitioning a dataset into a set of k \((k&lt;n )\)  distinct clusters where k represent the number of clusters and it’s pre-specified by the analyst. Using K-Means algorithmn each observation is assigned to one and only one cluster and can be characterized by a many to-one mapping \(k=C(i)\) that assigns the \(i\)th observation to the \(k\)th cluster with the goal of minimizing the differences within each cluster while maximizing the differences between clusters.</p>

<p>Partitioning customers into subgroups requires a method for computing the dissimilarities or similarities between customers. The choice of similarities (distance) measures is a critical step in clustering as it defines what it means for two or more observations (customers) to be similar or different and also influences the clustering result.
There are several different clustering criteria (distance measure) such as Manhattan and correlation-based distances but in this post squared Euclidean distance is chosen as the dissimilarity measure because with squared euclidean distance, customers with high values of variables tend to cluster together and those with low values of variables also tend to be cluster together and is given as</p>

\[d(x_{i}, x_{i′}) =\sum_{j=1}^{p} \lgroup x_{ij} -x_{i'j} \rgroup ^{2}=|| x_{i} -x_{i'}||^{2}\]

<p>The basic idea behind k-means clustering consist of defining clusters such that the total intra-cluster variation known as total within-cluster sum of square (WSS) which is a measure  of the amount by which the observations within a cluster differ from each other is minimized. The total within-cluster variation  is defined as</p>

\[WSS= \sum_{i \in k}\sum_{j=1}^{p} \lgroup x_{ij} -\mu_{kj} \rgroup ^{2}\]

<p>where k is the cluster, \(x_{ij}\) is the value of the \(j\)th variable for the $i$th observation, \(µ_{kj}\) is the is the centroid for the \(k\)th cluster, and p is the number of variables.</p>

<h2 id="conceptually-the-k-means-algorithm-is-as-follows">Conceptually, the k-means algorithm is as follows:</h2>

<ol>
  <li>
    <p>Specify the number of clusters (K) to be created.</p>
  </li>
  <li>
    <p>Randomly initialize k data points as the initial cluster centers (centroids).</p>
  </li>
  <li>
    <p>Assigns each observation to their closest centroid, based on the Euclidean distance between the observation and the centroid. Each of these centroids represents a cluster.</p>
  </li>
  <li>
    <p>Recalculate the cluster center (new centroids) as the average of its assigned data points</p>
  </li>
  <li>
    <p>Compute the distance between each observation and the new centroids and assign the data point to its closest centroid (new centroids).</p>
  </li>
  <li>
    <p>Iteratively minimize the total within sum of square. That is, iterate steps 4 and 5 until the cluster assignments stop changing (The centroids do not move significantly so observations aren’t reassigned new cluster) or or a maximum number of iterations is reached .</p>
  </li>
</ol>

<h2 id="choosing-the-right-number-of-clusters">Choosing the Right Number Of Clusters</h2>

<p>Determining the optimal number of clusters is a fundamental issue in partitioning clustering.  Features used play important role in defining similarities between clusters (customers). We usually do not know the optimal number of clusters, so there is a need to understand the different ways in choosing the optimal number of clusters. Decisions on the number of clusters can be subjective and depends on the method used for measuring similarities and the features used for partitioning. Choosing k can be subjective so if you have prior domain knowledge as to how many clusters should theoretically be present in a dataset, then you can use this knowledge to guide your selection. There are several approaches for determining the optimal number of clusters including visual inspection, silhouette score, elbow method, gap statistic method and many more  but in this post I will only look at the elbow method. These quantitative measures only tell how well that number of clusters fits the data. They do not tell how useful these clusters are for business. Since, it is the  business analyst that will interpret and act on these clusters, they have to understand the nature of the clusters and what each cluster cares about. So no matter how good these clusters are statistically, they are useless if they are not actionable by the business.</p>

<h3 id="elbow-method">Elbow Method</h3>

<p>The basic idea behind k-means clustering consists of defining clusters such that the total within-cluster sum of square (WSS) is minimized. Using Elbow method, the method looks at the total WSS as a function of the number of clusters. The total WSS will decreases as the number of clusters increases, because each cluster will be smaller and tighter. In this process the hope is that the rate at which the WSS decreases will slow down for k beyond the optimal number of clusters. In other words, the graph of WSS versus k should flatten out beyond the optimal k, so the optimal k will be at the <strong>elbo</strong> of the graph.</p>

<p>The optimal number of clusters can be defined as follow:</p>

<ol>
  <li>Compute k-means clustering for different values of k ,for instance, by varying k from 1 to 10 clusters.</li>
  <li>For each k, calculate the total within-cluster sum of square (wss).</li>
  <li>Plot the curve of wss according to the number of clusters k.</li>
  <li>The location of a bend (knee) in the plot is generally considered as an indicator of the appropriate number of clusters</li>
</ol>

<p>Let’s plot the total  WSS  for up to 15 clusters</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wss</span><span class="o">=</span><span class="p">[]</span>
<span class="n">K</span><span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">15</span><span class="p">)</span>
<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">K</span><span class="p">:</span>
    <span class="n">km</span><span class="o">=</span><span class="n">KMeans</span><span class="p">(</span><span class="n">n_clusters</span><span class="o">=</span><span class="n">k</span><span class="p">,</span><span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
    <span class="n">km</span><span class="o">=</span><span class="n">km</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">mall_data_1</span><span class="p">[</span><span class="n">selected_cols</span><span class="p">])</span>
    <span class="n">wss</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">km</span><span class="p">.</span><span class="n">inertia_</span><span class="p">)</span>


<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">[</span><span class="mi">7</span><span class="p">,</span><span class="mi">5</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">15</span><span class="p">),</span> <span class="n">wss</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'gray'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"WSS vs. number of clusters"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"Number of clusters: K"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'WSS'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img class="w3-center" src="/arizeblog/assets/images/python/cust_seg_2.png" />
<br /></p>

<p>When we look at the graph the peak of the bend,  occurs at around the 5th cluster, indicating that this is the ideal number of clusters. The code below instantiate a KMeans model with 5 number of clusters (n_clusters).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kmeans_model</span><span class="o">=</span><span class="n">KMeans</span><span class="p">(</span><span class="n">n_clusters</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
</code></pre></div></div>

<p>Next, fit the model on the data using the selected columns named selected_cols.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kmeans_model</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">mall_data_1</span><span class="p">[</span><span class="n">selected_cols</span><span class="p">])</span>
</code></pre></div></div>
<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style>
<div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>KMeans(n_clusters=5, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked="" /><label for="sk-estimator-id-1" class="sk-toggleable__label sk-toggleable__label-arrow">KMeans</label><div class="sk-toggleable__content"><pre>KMeans(n_clusters=5, random_state=42)</pre></div></div></div></div></div>

<p>Using the predict method of the k-means model, the code below assign to each customer a cluster with the cluster variable named as Cluster.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mall_data_1</span><span class="p">[</span><span class="s">'Cluster'</span><span class="p">]</span><span class="o">=</span><span class="n">kmeans_model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">mall_data_1</span><span class="p">[</span><span class="n">selected_cols</span><span class="p">])</span>
</code></pre></div></div>

<p>Let visualize the data points and their assigned cluster by using different shape and color for each cluster.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">markers</span> <span class="o">=</span> <span class="p">[</span><span class="s">'x'</span><span class="p">,</span> <span class="s">'*'</span><span class="p">,</span> <span class="s">'+'</span><span class="p">,</span> <span class="s">'|'</span><span class="p">,</span> <span class="s">'_'</span><span class="p">]</span>
<span class="n">colors</span><span class="o">=</span><span class="p">[</span><span class="s">'violet'</span><span class="p">,</span><span class="s">'red'</span><span class="p">,</span><span class="s">'green'</span><span class="p">,</span><span class="s">'blue'</span><span class="p">,</span><span class="s">'orange'</span><span class="p">]</span>
<span class="n">centroid</span><span class="o">=</span><span class="n">kmeans_model</span><span class="p">.</span><span class="n">cluster_centers_</span>

<span class="k">for</span> <span class="n">cluster</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
    <span class="n">temp</span> <span class="o">=</span> <span class="n">mall_data_1</span><span class="p">[</span><span class="n">mall_data_1</span><span class="p">.</span><span class="n">Cluster</span> <span class="o">==</span> <span class="n">cluster</span><span class="p">]</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">temp</span><span class="p">.</span><span class="n">Income</span><span class="p">,</span> <span class="n">temp</span><span class="p">.</span><span class="n">Spending_Score</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="n">markers</span><span class="p">[</span><span class="n">cluster</span><span class="p">],</span>
                <span class="n">color</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="n">cluster</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s">"Cluster "</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">cluster</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">centroid</span><span class="p">[</span><span class="n">cluster</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="n">centroid</span><span class="p">[</span><span class="n">cluster</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span><span class="n">color</span> <span class="o">=</span> <span class="s">'black'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Income'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"K-Means Clustering"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Spend_score'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img class="w3-center" src="/arizeblog/assets/images/python/cust_seg_3.png" />
<br /></p>

<p>Looking at the scatter plot above with clusters represented by different shapes and colors,
the k-means algorithm did a great job of identifying the natural grouping within the data .</p>

<h2 id="understanding-and-describing-the-clusters">Understanding and Describing the Clusters</h2>

<p>As a marketing analyst, you need to have a clear understanding of each segments so that you can explain to the various stakeholders in the business what each cluster (segment) means from a business perspective since they are usually the decision makers. To understand the clusters, one simple approach is to study the various characteristics of the customers based on the relevant features used for clustering and to understand the characteristics of the clusters, we will analyze the features in the original  customer dataset (mall_data)  which does not contain scaled features by adding their predicted clusters to see how Income and Spending_Score varies across the clusters.</p>

<p>the code below add customers predicted clusters to the original mall dataset:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mall_data</span><span class="p">[</span><span class="s">"Cluster"</span><span class="p">]</span><span class="o">=</span><span class="n">mall_data_1</span><span class="p">.</span><span class="n">Cluster</span>
</code></pre></div></div>

<p>To see how Income and Spending_Score varies across the segments, let group the dataset by Cluster and plot the mean value of each cluster using the code below</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mall_data</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="s">'Cluster'</span><span class="p">)[[</span><span class="s">'Income'</span><span class="p">,</span><span class="s">'Spending_Score'</span><span class="p">]].</span><span class="n">mean</span><span class="p">().</span><span class="n">plot</span><span class="p">.</span><span class="n">bar</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img class="w3-center" src="/arizeblog/assets/images/python/cust_seg_4.png" />
<br /></p>

<p>Let also sample 10 customers with their predicted clusters</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mall_data</span><span class="p">.</span><span class="n">sample</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CustomerID</th>
      <th>Gender</th>
      <th>Age</th>
      <th>Income</th>
      <th>Spending_Score</th>
      <th>Cluster</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>24</th>
      <td>25</td>
      <td>Female</td>
      <td>54</td>
      <td>28</td>
      <td>14</td>
      <td>2</td>
    </tr>
    <tr>
      <th>111</th>
      <td>112</td>
      <td>Female</td>
      <td>19</td>
      <td>63</td>
      <td>54</td>
      <td>0</td>
    </tr>
    <tr>
      <th>124</th>
      <td>125</td>
      <td>Female</td>
      <td>23</td>
      <td>70</td>
      <td>29</td>
      <td>1</td>
    </tr>
    <tr>
      <th>16</th>
      <td>17</td>
      <td>Female</td>
      <td>35</td>
      <td>21</td>
      <td>35</td>
      <td>2</td>
    </tr>
    <tr>
      <th>138</th>
      <td>139</td>
      <td>Male</td>
      <td>19</td>
      <td>74</td>
      <td>10</td>
      <td>1</td>
    </tr>
    <tr>
      <th>92</th>
      <td>93</td>
      <td>Male</td>
      <td>48</td>
      <td>60</td>
      <td>49</td>
      <td>0</td>
    </tr>
    <tr>
      <th>130</th>
      <td>131</td>
      <td>Male</td>
      <td>47</td>
      <td>71</td>
      <td>9</td>
      <td>1</td>
    </tr>
    <tr>
      <th>174</th>
      <td>175</td>
      <td>Female</td>
      <td>52</td>
      <td>88</td>
      <td>13</td>
      <td>1</td>
    </tr>
    <tr>
      <th>11</th>
      <td>12</td>
      <td>Female</td>
      <td>35</td>
      <td>19</td>
      <td>99</td>
      <td>3</td>
    </tr>
    <tr>
      <th>183</th>
      <td>184</td>
      <td>Female</td>
      <td>29</td>
      <td>98</td>
      <td>88</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>

<p>From the above graph and table we can describe the clusters as:</p>

<ul>
  <li><strong>Cluster 0</strong>: Moderate spenders with moderate-income</li>
  <li><strong>Cluster 1</strong>: Low spenders with high-income</li>
  <li><strong>Cluster 2</strong>: Low spenders with low-income</li>
  <li><strong>Cluster 3</strong>: High spenders with low-income</li>
  <li><strong>Cluster 4</strong>: High spenders with high-income</li>
</ul>

<p>With these clusters, the business can decide to focus on customers in cluster 0,3,4 since these clusters have high spending scores which provide high revenues to the business.</p>]]></content><author><name>Arize Emmanuel</name></author><category term="machine-learning-python" /><summary type="html"><![CDATA[In this post, I’ll focus on customer segmentation and provide practical examples using k-means algorithm.]]></summary></entry><entry><title type="html">Shape and Append Queries</title><link href="http://localhost:4000/arizeblog/power-query/2023/02/20/Append-Query.html" rel="alternate" type="text/html" title="Shape and Append Queries" /><published>2023-02-20T00:00:00+00:00</published><updated>2023-02-20T00:00:00+00:00</updated><id>http://localhost:4000/arizeblog/power-query/2023/02/20/Append-Query</id><content type="html" xml:base="http://localhost:4000/arizeblog/power-query/2023/02/20/Append-Query.html"><![CDATA[<p>In this tutorial I will be illustrating how to append queries in Power Query. Appending two or more queries in Power Query is one of the most basic and essential tasks that you may need to do in most data preparation scenarios because as a data analyst you may have multiple queries of which you may need to combine to form a single query. Using power query append operation, you can create a single query by adding the contents of one or more queries to another.</p>

<p>When queries are appended the rows from one query are appended (or added) ) at the end of the rows in another query where the column values match.  When a query with 30 rows is appended with another query with 20 rows, this will return a resulting query with 50 rows. In the case of two queries that do not have the same column headers, all column headers from all queries are appended to the resulting query. To append two queries we need data so let now load the data November_2019 and December_2019 below using Power BI.</p>

<p><br />
November_2019
<img class="w3-center" src="/arizeblog/assets/images/power_query/append_001.jpg" /></p>

<p><br /></p>

<p><br />
December_2019
<img class="w3-center" src="/arizeblog/assets/images/power_query/append_01.jpg" /></p>

<p><br /></p>
<h2 id="preprocessing-the-data">Preprocessing the Data</h2>
<p>From the November_2019 data above the first fours rows contain data not relevant to our analysis so we need to remove them.</p>

<p>To remove the first four rows in power query</p>
<ol>
  <li>click on the home tab.</li>
  <li>Under the Reduce Row group click on <strong>Remove Rows</strong> as below.</li>
</ol>

<p><br />
<img class="w3-center" src="/arizeblog/assets/images/power_query/append_02.jpg" /></p>

<p style="margin-left: 50px;">3. From the drop down list select <b>Remove Top Rows</b>.</p>
<p style="margin-left: 50px;">4. In the Remove top rows window, enter 4 in the Number of rows box as below.</p>

<p><br />
<img class="w3-center" src="/arizeblog/assets/images/power_query/append_3.jpg" />
<br /></p>

<p>After clicking ok the operation leaves the headers of the table as the first row shown below.</p>

<p><br />
<img class="w3-center" src="/arizeblog/assets/images/power_query/append_04.jpg" />
<br /></p>

<h3 id="promote-headers-operation">Promote Headers Operation</h3>
<p>The promote headers operation promotes the first row of values as the new column headers.
There are a number of places where we can select the promote headers  operation (<strong>Use First Row as Headers</strong> )</p>

<p>Click on the Home tab then in the Transform group</p>

<p><br />
<img class="w3-center" src="/arizeblog/assets/images/power_query/append_5.jpg" />
<br /></p>

<p>Or On the Transform tab, in the Table group.</p>

<p><br />
<img class="w3-center" src="/arizeblog/assets/images/power_query/append_6.jpg" />
<br /></p>

<p>After clicking on Use First Row as Headers, the first row in the query is used as the column headers of the query and we get the table below</p>

<p><br />
<img class="w3-center" src="/arizeblog/assets/images/power_query/append_7.jpg" />
<br /></p>

<p>For simplicity we will sort the data based on Date column in ascending order and use only the last 5 rows in the table.</p>

<h3 id="sorting--data">Sorting  Data</h3>
<p>to sort the data based on the date column click on the drop down arrow in date column and select <strong>Sort Ascending</strong> as below</p>

<p><br />
 <img class="w3-center" src="/arizeblog/assets/images/power_query/append_8.jpg" />
 <br /></p>

<h3 id="filtering-the-data">Filtering the Data</h3>
<p>To filter the data to contain only the last five rows</p>

<ol>
  <li>click on the home tab.</li>
  <li>Under the Reduce Row group click on <strong>Keep Rows</strong> as below.</li>
  <li>From the drop down list select <strong>Keep Bottom Rows.</strong></li>
  <li>In the Keep Bottom rows window, enter 5 in the Number of rows box as below.</li>
</ol>

<p><br />
<img class="w3-center" src="/arizeblog/assets/images/power_query/append_9.jpg" />
<br /></p>

<p>to get the table below</p>

<p><br />
<img class="w3-center" src="/arizeblog/assets/images/power_query/append_10.jpg" />
<br /></p>

<h3 id="processing-the-second-table-december_2019">Processing the Second table (December_2019)</h3>

<p>In the second table we will apply the same steps used in preprocessing the first table but instead of keeping the last five rows we will keep the top five rows which will give us the table below</p>

<p><br />
<img class="w3-center" src="/arizeblog/assets/images/power_query/append_11.jpg" />
<br /></p>

<h3 id="appending-queries">Appending Queries</h3>
<p>The append operation requires at least two tables. The Append queries command can be found on the Home tab in the Combine group.
<br />
<img class="w3-center" src="/arizeblog/assets/images/power_query/append_12.jpg" />
<br /></p>

<p>On the drop-down menu, you’ll see two options:</p>
<ol>
  <li><strong>Append queries</strong>: which displays the Append dialog box to add additional tables to the
current query.</li>
  <li><strong>Append queries as new</strong> : displays the Append dialog box to create a new query by
appending multiple tables</li>
</ol>

<p>The Append dialog box has two modes:</p>
<ol>
  <li><strong>Two tables</strong>: Combine two table queries together. This mode is the default mode.</li>
  <li><strong>Three or more tables</strong>: Allow an arbitrary number of table queries to be combined.</li>
</ol>

<p>Now let append the November_2019 and December_2019 data as a new query. To append these tables, first select the November_2019 table and on the Home tab, select <strong>Append queries as new</strong>.</p>

<p><br />
<img class="w3-center" src="/arizeblog/assets/images/power_query/append_13.jpg" />
<br /></p>

<p>In the Second table dialog box select the December 2019 data and click ok. After clicking ok a new query named Append1
which contain the total number of rows in December_2019 appended to that of November_2019 as below</p>

<p><br />
<img class="w3-center" src="/arizeblog/assets/images/power_query/append_14.jpg" />
<br /></p>

<p><strong>Note:</strong> In the event that one table doesn’t have columns found in another table, null values will appear in the corresponding column</p>]]></content><author><name>Emmanuel Arize</name></author><category term="Power-Query" /><summary type="html"><![CDATA[In this tutorial I will be illustrating how to append queries in Power Query. Appending two or more queries in Power Query is one of the most basic and essential tasks that you may need to do in most data preparation scenarios because as a data analyst you may have multiple queries of which you may need to combine to form a single query. Using power query append operation, you can create a single query by adding the contents of one or more queries to another.]]></summary></entry><entry><title type="html">Excel Bullet Chart</title><link href="http://localhost:4000/arizeblog/excel/2022/10/22/bullet-graph.html" rel="alternate" type="text/html" title="Excel Bullet Chart" /><published>2022-10-22T00:00:00+00:00</published><updated>2022-10-22T00:00:00+00:00</updated><id>http://localhost:4000/arizeblog/excel/2022/10/22/bullet-graph</id><content type="html" xml:base="http://localhost:4000/arizeblog/excel/2022/10/22/bullet-graph.html"><![CDATA[<p><br />
<img src="/arizeblog/assets/images/Excel/bullet12.jpg" />
<br /></p>

<p>In the business world, no matter the industry we found ourselves, we always have targets and goals that we want to archive. In order to know the progress of our work, we tend to find effective ways to represent our progress or performance against the set target, and one of such ways or methods of representing performance against the  target  is the use of a bullet chart. A Bullet chart is variation of bar chart, used for making comparisons such as showing performance metrics against a target. Using bullet chart we can effectively represent our performance against the target to know whether we are progressing or not.</p>

<h2 id="how-do-you-read-a-bullet-chart">How do you read a bullet chart?</h2>
<p>A bullet chart usually encodes three different data elements:</p>
<ol>
  <li>An observed value known as <strong>Feature or performance Measure</strong> (performance score or the bullet). This is the primary data and is usually encoded as a bar, like the bar on a bar chart (encoded as black bar in the chart below) and centered in the plot area.</li>
  <li>A target value known as <strong>Comparative Measure</strong> used as a target marker to compare against the Feature Measure value.  This is shown in the chart below as a short red line marker that runs perpendicular to the orientation of the chart. Whenever the <strong>Feature Measure</strong> hit or intersect the target, you know you’ve hit your target.</li>
  <li>A qualitative Range of values used for grading. These ranges do  not only communicate the qualitative state of the featured measure but also the degree to which it resides within that state. If for instance the feature measure extends into a range that represents good, the distance that it travels into this range indicates how good it is.</li>
</ol>

<p>For example in the chart below, we are measuring the year to date (YTD) revenue rating for the year. Using this chart, we can see that the YTD rating is 80% (shown as a black bar) and this could not hit the target value 90%  which is represented as a red line perpendicular to the black bar. With this bullet chart we can easily that although our performance came close the target value, we could not archive our set goal or target which is 90%.</p>

<p><br />
<img src="/arizeblog/assets/images/Excel/bullet1.jpg" />
<br /></p>

<h3 id="steps-in-creating-a-bullet-chart-in-excel">Steps in creating a Bullet Chart in Excel</h3>

<p>Using the table below we have three different data elements namely</p>

<ol>
  <li>First four values which are the qualitative range of values used for grading.</li>
  <li>Performance score (feature measure) which is the revenue rating for the year.</li>
  <li>Target value which is the target that we wanted to archive for the year.</li>
</ol>

<p><br />
<img src="/arizeblog/assets/images/Excel/bullet2.jpg" />
<br /></p>

<p>to create a bullet chart with this data</p>

<ol>
  <li>Select the needed data (in our case the entire table). After selecting the data click on the <strong>insert tab</strong> and select <strong>recommended Charts</strong>  then <strong>ALL Charts</strong>. From all Charts select Column chart and then a stacked column chart as below</li>
</ol>

<p><br />
<img src="/arizeblog/assets/images/Excel/bullet3.jpg" />
<br /></p>

<p>and click on <strong>ok</strong> to get the chart below</p>

<p><br />
<img src="/arizeblog/assets/images/Excel/bullet4.jpg" />
<br /></p>
<p>
2. The  range of values on the y-axis is from 0% to 300%. Let change it to have values from 0% to 100% by clicking on the
stacked column chart then from <b>Series Options </b> under <b>Format Data Series </b> select <b>vertical (Axis) value</b> .
After selecting vertical (Axis) value, now select <b>Axis Options</b> and click on the <b>Axis Options</b> to change the <b>maximum </b> value from 3.0 as shown below
</p>
<p><br />
<img src="/arizeblog/assets/images/Excel/bullet5.jpg" />
<br /></p>

<p>to 1.0 as shown below</p>

<p><br />
<img src="/arizeblog/assets/images/Excel/bullet6.jpg" />
<br /></p>
<p>
3. Right-click the stacked column chart and choose Change Series Chart Type. Use the Change Chart
Type dialog box to change the Target series to a Stacked Line with Markers and check the checkbox under the secondary axis as shown below and click ok.
</p>

<p><br />
<img src="/arizeblog/assets/images/Excel/bullet7.jpg" />
<br /></p>

<p>After clicking ok to the change, the Target series will show on the chart as a single dot as below.</p>

<p><br />
<img src="/arizeblog/assets/images/Excel/bullet71.jpg" />
<br /></p>

<p>
4. Right-click on the chart and select Format Data Series, then from the <b>Series Options</b> under <b>Format Data Series</b> select <b>series "Target"</b> .

Now under the <b>Fill &amp; Line </b> click on the Marker option and adjust the marker to look like a line and change the size to 20. </p>
<p>Expand the Fill section, select <strong>solid line</strong> and change the color of the solid line to red. Expand the Border section also and set the Border to No Line.
<br />
<img src="/arizeblog/assets/images/Excel/bullet8.jpg" />
<br /></p>

<p>After making changes to the maker click on the <strong>Line option</strong> and expand the line section, select <strong>solid line</strong> and change the color of the solid line to red.</p>

<p> 5. Right click on the new secondary axis that was added to the right side of the chart and the delete it to have a chart as below.

<br />
<img src="/arizeblog/assets/images/Excel/bullet9.jpg" />
<br />

<p>
6. Now right-click on the chart and select Format Data Series, then from the <b>Series Options</b> under <b>Format Data Series</b> select <b>series "Performance score"</b>. </p>

<p> 7. In the Format Data Series dialog box, select Secondary Axis. </p>

<p> 8. Still in the Format Data Series dialog box under Series Options, adjust the Gap Width property so that the Performance score series is slightly narrower than the other columns in the chart —here you are using 400% as below.
</p>

<br />
<img src="/arizeblog/assets/images/Excel/bullet10.jpg" />
<br />

<p>
9. Still in the Format Data Series dialog box , under  the <b> Fill &amp; Line option</b>, expand the Fill section, and then select the Solid fill option to set the color of the Performance score series to black as shown below</p>

<br />
<img src="/arizeblog/assets/images/Excel/bullet11.jpg" />
<br />


<p>10. At this point all that is left to do is to change the color for each qualitative range to incrementally lighter
hues.</p>

<p> 11. After changing the qualitative range to incrementally lighter hues let also change the title to YTD revenue Rating</p>

The final bullet chart is given below

<br />
<img src="/arizeblog/assets/images/Excel/bullet12.jpg" />
<br />

### Conclusion
From this illustration we can see that bullet chart is an effective way of  representing your progress or performance against the set target. I t is also important to know how to read bullet chart.
</p>]]></content><author><name>Emmanuel Arize</name></author><category term="Excel" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">DAX TREATAS Function</title><link href="http://localhost:4000/arizeblog/power-bi/2022/10/21/Treatas.html" rel="alternate" type="text/html" title="DAX TREATAS Function" /><published>2022-10-21T00:00:00+00:00</published><updated>2022-10-21T00:00:00+00:00</updated><id>http://localhost:4000/arizeblog/power-bi/2022/10/21/Treatas</id><content type="html" xml:base="http://localhost:4000/arizeblog/power-bi/2022/10/21/Treatas.html"><![CDATA[<p>In this blog post, I’ll dive into the DAX TREATAS function by first showing how to create a virtual relationship between two tables using TREATAS and then move on to show how we can simplify a filtering expression using the TREATAS function.</p>

<h3 id="virtual-relationship-using-treatas">Virtual Relationship using TREATAS</h3>
<p>The Best practice to move a filter from one table to another is to create a physical relationship between the two tables
involved. What if the relationship doesn’t exist, is there a way to create virtual relationship between these two tables to  mimic physical relationship so that the user thinks there is a relationship in place, even if there is none? Using DAX TREATAS function, you can create  a virtual relationship between tables that mimic physical relationship. This technique is useful whenever a relationship does not exist between the tables involved.</p>

<p>In order to show how to create a virtual relationship between two tables such the Reseller and Sales tables, I have deleted the physical relationship existing between these two tables using data from <a href="https://github.com/microsoft/powerbi-desktop-samples/blob/main/DAX/Adventure%20Works%20DW%202020.pbix">Adventure Works DW 2020<a></a> which can be seen from the data model below</a></p>

<p><br />
<img class="w3-card" src="/arizeblog/assets/images/power_bi/treatas1.jpg" />
<br /></p>

<p>Without any physical relationship between the Reseller and Sales tables, let look at the amount of sales by country using <a href="https://daxstudio.org" target="_blank"> DAX Studio</a></p>

<pre><code class="language-{DAX}">EVALUATE
	SUMMARIZECOLUMNS(
              Reseller[Country],
             "Sales Amount",[Sales Amt]
	)
</code></pre>

<p><img class="w3-card w3-brown" src="/arizeblog/assets/images/power_bi/treatas2.jpg" /></p>

<p>From the preceding figure we see that the sum of sales amount is the same for all the countries involved because there no relationship between the two tables.</p>

<p>Using <a href="https://learn.microsoft.com/en-us/dax/treatas-function"> TREATAS</a>, it applies the result of a table expression as filters to columns from an unrelated table and is defined by the syntax below</p>

<pre><code class="language-{dax}">TREATAS(table_expression, &lt;column&gt;[, &lt;column&gt;[, &lt;column&gt;[,…]]]} )
</code></pre>

<p>With the  TREATAS function, I can create a virtual relationship between the two tables to propagate the filter context from Reseller to Sales and it is given by the code below,
 <br />
<img class="w3-card w3-brown" src="/arizeblog/assets/images/power_bi/treatas3.jpg" /></p>

<p>TREATAS connects the two tables using the ResellerKey column, and the preceding figure shows that the amount of sales is filtered by Country, even though there is no physical relationship existing between the two tables.</p>

<p>Let now create a physical relationship between the Reseller and Sales tables using the ResellerKey column in power BI as below to see if it will produce the same result</p>

<p><br />
<img class="w3-card w3-brown" src="/arizeblog/assets/images/power_bi/treatas4.jpg" />
<br /></p>

<p>With the physical relationship between the tables created, let check if we will get the same result for the amount of sales filtered by country as that of the virtual relationship.</p>

<p>Result of the Data model with physical relationship.<br />
<img class="w3-card w3-brown" src="/arizeblog/assets/images/power_bi/treatas05.jpg" />
<br /></p>

<p>Result of the Data model with virtual relationship.<br />
<img class="w3-card w3-brown" src="/arizeblog/assets/images/power_bi/treatas6.jpg" />
<br /></p>

<p>We can see from the above figures that result of the Data model with physical relationship and that of Data model with virtual relationship produce the same results.</p>

<h3 id="filtering-values-using-treatas">Filtering Values Using TREATAS</h3>
<p>In this section of the post I will be filtering values using the TREATAS function. Before we start using TREATAS to filter values, we need to create two calculated columns since the columns needed for the filtering are not part of data model.</p>

<p>Let add two calculated two columns name <strong>Year</strong> and <strong>Month Num</strong> to the date table which contain the year and the number representing the month.
<br /></p>
<pre><code class="language-{DAX}">Year = YEAR([Date])
</code></pre>
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Month Num = MONTH('Date'[Date])
</code></pre></div></div>
<p><br /></p>

<p>With the calculated columns created, let now create two measures <strong>2018/19 Sales</strong> and <strong>2018/19 Sales_T</strong> which filter the amount of sales for 2018 or 2019 using the FILTER and TREATAS function respectively.</p>

<p><br /></p>

<p><img class="w3-card w3-brown" src="/arizeblog/assets/images/power_bi/treatas7.jpg" />
<br /></p>

<p><img class="w3-card w3-brown" src="/arizeblog/assets/images/power_bi/treatas8.jpg" />
<br /></p>

<p>Let now use the report canvas to display the values for the two measures created
<br /></p>

<p><img class="w3-card w3-brown" src="/arizeblog/assets/images/power_bi/treatas9.jpg" />
<br /></p>

<p>Continuing the filtering examples, let create additional two measures <strong>12-2018/1-2019 Sales</strong> and <strong>12-2018/1-2019 Sales_T</strong> which filter the amount of sales for 12/2018 or 1/2019, using the filter function and TREATAS function respectively and where 1 and 12 represent months. For instance 1=January.</p>

<p><br /></p>

<p><img class="w3-card w3-brown" src="/arizeblog/assets/images/power_bi/treatas10.jpg" />
<br /></p>

<p><img class="w3-card w3-brown" src="/arizeblog/assets/images/power_bi/treatas11.jpg" />
<br /></p>

<p>Let now use the report canvas to display the values for <strong>12-2018/1-2019 Sales</strong> and <strong>12-2018/1-2019 Sales_T</strong>
<br /></p>

<p><img class="w3-card w3-brown" src="/arizeblog/assets/images/power_bi/treatas12.jpg" />
<br /></p>

<h3 id="conclusion">Conclusion</h3>

<p>In this post we’ve seen that the TREATAS function is an important function which can be used to simplify filtering expressions and also used to create a virtual relationship between two tables.</p>]]></content><author><name>Emmanuel Arize</name></author><category term="Power-BI" /><summary type="html"><![CDATA[In this blog post, I’ll dive into the DAX TREATAS function by first showing how to create a virtual relationship between two tables using TREATAS and then move on to show how we can simplify a filtering expression using the TREATAS function.]]></summary></entry><entry><title type="html">DAX FILTER Function</title><link href="http://localhost:4000/arizeblog/power-bi/2022/10/20/Filter.html" rel="alternate" type="text/html" title="DAX FILTER Function" /><published>2022-10-20T00:00:00+00:00</published><updated>2022-10-20T00:00:00+00:00</updated><id>http://localhost:4000/arizeblog/power-bi/2022/10/20/Filter</id><content type="html" xml:base="http://localhost:4000/arizeblog/power-bi/2022/10/20/Filter.html"><![CDATA[<p>This tutorial illustrate how to filter a table using the FILTER function in DAX. Whether you are a data scientist, a marketing or sales person, filtering data is one of the most common ways you analyze data. The FILTER function is often used to filter rows of a table  reducing the size of the table. When table is filtered, the resulting data is a subset of table and this presents an opportunity to prepare for future analysis.</p>

<p>The syntax of FILTER is given as:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FILTER ( &lt;table&gt;, &lt;condition&gt; )
</code></pre></div></div>
<p>Using this syntax FILTER receives a table and a logical condition as parameters. In order to return a result, it iterates the table evaluating the condition on a row-by-row basis and returns all rows satisfying the condition.</p>

<p>Let now create a measure <strong>Canada Sales</strong> that finds the amount of sales from Canada</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Canada Sales = CALCULATE(
                        Sales[Sales Amt],
                        FILTER(
                                Customer,
                                Customer[Country-Region]="Canada"
                              )
                      )

</code></pre></div></div>
<p>Result from the <strong>Canada Sales</strong> measure shows only sales where Customers are from or in Canada
<br />
<img class="w3-card w3-brown" src="/arizeblog/assets/images/power_bi/filter1.jpg" />
<br /></p>

<p>Let create another measure <strong>Canada USA Sales</strong> that filter the table to return sales where a customer is either from Canada or United States,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Canada USA Sales = CALCULATE(
                            Sales[Sales Amt],
                            FILTER(
                                    Customer,
                                    Customer[Country-Region]="Canada" || Customer[Country-Region]="United States"
                                    )
                            )
</code></pre></div></div>

<p>Result from the <strong>Canada USA Sales</strong> measure shows only sales where Customers are from either Canada OR United States
<br />
<img class="w3-card w3-brown" src="/arizeblog/assets/images/power_bi/filter2.jpg" />
<br /></p>

<h3 id="conclusion">Conclusion</h3>
<p>The filter function is a simple Power BI function that allows you to iterate table on a row-by-row basis and returns all rows satisfying the condition specified.</p>]]></content><author><name>Arize Emmanuel</name></author><category term="Power-BI" /><summary type="html"><![CDATA[This tutorial illustrate how to filter a table using the FILTER function in DAX. Whether you are a data scientist, a marketing or sales person, filtering data is one of the most common ways you analyze data. The FILTER function is often used to filter rows of a table reducing the size of the table. When table is filtered, the resulting data is a subset of table and this presents an opportunity to prepare for future analysis.]]></summary></entry><entry><title type="html">Excel IF Function</title><link href="http://localhost:4000/arizeblog/excel/2022/10/20/IF-Statement.html" rel="alternate" type="text/html" title="Excel IF Function" /><published>2022-10-20T00:00:00+00:00</published><updated>2022-10-20T00:00:00+00:00</updated><id>http://localhost:4000/arizeblog/excel/2022/10/20/IF-Statement</id><content type="html" xml:base="http://localhost:4000/arizeblog/excel/2022/10/20/IF-Statement.html"><![CDATA[<p>In this tutorial I will be illustrating how to use EXCEL IF function. The IF function is one of the most used functions in Excel which returns values based on a <strong>true</strong> or <strong>false condition</strong>.The condition here is referred to as logical_test and the function has the following syntax.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>=IF(logical_test, [value_if_true], [value_if_false])
</code></pre></div></div>

<p>For example, =IF(A2=100,”High”,”Low”) says IF(A2= 100, then return High, otherwise return Low).</p>

<p>Let now look at the worksheet below</p>

<p><br />
<img class="w3-center" src="/arizeblog/assets/images/Excel/if1.jpg" />
<br />
Using the preceding the figure above let now rate the sales amount as <strong>high</strong> if sales amount is equal or greater than 100 or low using if less than 100 using the if function.</p>

<p>Let name cell C1 AS <strong>Sales Rating</strong>,</p>

<p><br />
<img class="w3-center" src="/arizeblog/assets/images/Excel/if2.jpg" />
<br /></p>

<ol>
  <li>Select the cell <strong>C2</strong></li>
  <li>Type <strong>=IF</strong></li>
  <li>Double click the IF command</li>
</ol>

<p><br />
 <img class="w3-center" src="/arizeblog/assets/images/Excel/if3.jpg" />
 <br /></p>

<ol>
  <li>Specify the condition B2&gt;=100</li>
  <li>Type ,</li>
  <li>Specify the value “High” for when the condition is TRUE</li>
  <li>Type ,</li>
  <li>Specify the value “Low” for when the condition is FALSE</li>
  <li>Type )</li>
  <li>Hit enter</li>
</ol>

<p><br />
 <img class="w3-center" src="/arizeblog/assets/images/Excel/if4.jpg" />
 <br /></p>

<p>Since the value in cell B2 is greater than 100, the condition is true so the function returns “High”.</p>

<p><br />
<img class="w3-center" src="/arizeblog/assets/images/Excel/if5.jpg" />
<br /></p>

<p>Click on cell C2 and drag it down to populate the other cells as shown below,
<br />
<img class="w3-center" src="/arizeblog/assets/images/Excel/if6.jpg" />
<br /></p>

<h3 id="nested-if-function">Nested IF Function</h3>
<p>Using the IF function it is also possible to use an IF statement as a TRUE or FALSE value inside another IF function and in this way you can test for more than one condition within one function and return more than two results. Let illustrate this with an example.</p>

<p>In this example we are rating the sales amount as <strong>high</strong> if THE amount is equal or greater than 150 and <strong>Medium</strong> if greater than or equal 100 but less than 150 and <strong>low</strong> otherwise using nested if function.</p>

<p>Let name cell D1 AS <strong>Sales Rating 2</strong> and in cell D2 type,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>=IF( B2&gt;=150, "High",
     IF(B2&gt;=100,"Medium","Low")
    )
</code></pre></div></div>
<p><br />
<img class="w3-center" src="/arizeblog/assets/images/Excel/if7.jpg" />
<br /></p>

<p>Click on cell D2 and drag it down to populate the other cells as shown below,
<br />
<img class="w3-center" src="/arizeblog/assets/images/Excel/if8.jpg" />
<br /></p>]]></content><author><name>Emmanuel Arize</name></author><category term="Excel" /><summary type="html"><![CDATA[In this tutorial I will be illustrating how to use EXCEL IF function. The IF function is one of the most used functions in Excel which returns values based on a true or false condition.The condition here is referred to as logical_test and the function has the following syntax.]]></summary></entry></feed>